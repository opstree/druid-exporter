#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

version: "3"

services:
  postgres:
    container_name: postgres
    image: postgres:latest
    volumes:
      - metadata_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=SomeStrongPassword
      - POSTGRES_USER=druid
      - POSTGRES_DB=druid
    networks:
      - druid

  # Need 3.5 or later for container nodes
  zookeeper:
    container_name: zookeeper
    image: zookeeper:3.5
    environment:
      - ZOO_MY_ID=1
    networks:
      - druid

  coordinator:
    image: apache/druid:0.20.0
    container_name: coordinator
    volumes:
      - ./volumes/druid_storage:/opt/data
      - druid_var:/opt/druid-conf/var
    depends_on:
      - zookeeper
      - postgres
    ports:
      - "8081:8081"
    command:
      - coordinator
    env_file:
      - ./druid-conf/environment
    networks:
      - druid

  broker:
    image: apache/druid:0.20.0
    container_name: broker
    volumes:
      - druid_var:/opt/druid-conf/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8082:8082"
    command:
      - broker
    env_file:
      - ./druid-conf/environment
    networks:
      - druid

  historical:
    image: apache/druid:0.20.0
    container_name: historical
    volumes:
      - ./volumes/druid_storage:/opt/data
      - druid_var:/opt/druid-conf/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8083:8083"
    command:
      - historical
    env_file:
      - ./druid-conf/environment
    networks:
      - druid

  middlemanager:
    image: apache/druid:0.20.0
    container_name: middlemanager
    volumes:
      - ./volumes/druid_storage:/opt/data
      - druid_var:/opt/druid-conf/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8091:8091"
    command:
      - middleManager
    env_file:
      - ./druid-conf/environment
    networks:
      - druid

  router:
    image: apache/druid:0.20.0
    container_name: router
    volumes:
      - druid_var:/opt/druid-conf/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8888:8888"
    command:
      - router
    env_file:
      - ./druid-conf/environment
    networks:
      - druid

  overlord:
    image: apache/druid:0.20.0
    container_name: overlord
    volumes:
      - druid_var:/opt/druid-conf/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8093:8081"
    command:
      - overlord
    env_file:
      - ./druid-conf/environment
    networks:
      - druid

  druid_exporter:
    image: quay.io/opstree/druid-exporter:v0.9
    container_name: druid_exporter
    ports:
      - "9080:8080"
    environment:
      - DRUID_URL=http://router:8888
    depends_on:
      - router
    restart: unless-stopped
    networks:
      - druid

  prometheus:
    image: quay.io/prometheus/prometheus
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus-storage:/prometheus:rw
      - ./prometheus-conf/:/etc/prometheus/
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - druid

  grafana:
    depends_on:
      - prometheus
    image: grafana/grafana:7.1.1
    container_name: grafana
    user: "472"
    ports:
      - "3000:3000"
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=SomePassword
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_storage:/var/lib/grafana
      - ./grafana-conf/provisioning/:/etc/grafana/provisioning/
    networks:
      - druid

networks:
  druid:
    driver: bridge

volumes:
  metadata_data: {}
  druid_var: {}
  grafana_storage: {}
  prometheus-storage: {}
